#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# Polyglot Notebooks version of FU-611 Final Project

This notebook uses .NET and Polyglot Notebooks together to perform a binary classification experiment.

#!markdown

## Train / Test Split

#!csharp

#r "nuget:Microsoft.ML,3.0.0-preview.23511.1"

#!csharp

using Microsoft.ML;
using Microsoft.ML.Data;

// Create MLContext to be shared across the model creation workflow objects
MLContext mlContext = new();

mlContext

#!csharp

public class CreditEntry 
{
    [LoadColumn(0)]
    public float CreditAmount {get; set;}
    [LoadColumn(1)]
    public int Gender {get; set;}
    [LoadColumn(2)]
    public int Education {get; set;}
    [LoadColumn(3)]
    public int MaritalStatus {get; set;}
    [LoadColumn(4)]
    public int Age {get; set;}
    [LoadColumn(5)]
    public int RepayDelaySep {get; set;}
    [LoadColumn(6)]
    public int RepayDelayAug {get; set;}
    [LoadColumn(7)]
    public int RepayDelayJul {get; set;}
    [LoadColumn(8)]
    public int RepayDelayJun {get; set;}
    [LoadColumn(9)]
    public int RepayDelayMay {get; set;}
    [LoadColumn(10)]
    public int RepayDelayApr {get; set;}
    [LoadColumn(11)]
    public int BillSep {get; set;}
    [LoadColumn(12)]
    public int BillAug {get; set;}
    [LoadColumn(13)]
    public int BillJul {get; set;}
    [LoadColumn(14)]
    public int BillJun {get; set;}
    [LoadColumn(15)]
    public int BillMay {get; set;}
    [LoadColumn(16)]
    public int BillApr {get; set;}
    [LoadColumn(17)]
    public int PaySep {get; set;}
    [LoadColumn(18)]
    public int PayAug {get; set;}
    [LoadColumn(19)]
    public int PayJul {get; set;}
    [LoadColumn(20)]
    public int PayJun {get; set;}
    [LoadColumn(21)]
    public int PayMay {get; set;}
    [LoadColumn(22)]
    public int PayApr {get; set;}    
    [LoadColumn(23)]
    public bool Defaulted {get; set;}
    [LoadColumn(24)]
    public float AverageRepayDelay {get; set;}
}

#!csharp

// Create a new dataframe from df with the defaulted column as a label and all other columns merged into a single column called features
string trainTestFile = System.IO.Path.Combine(Environment.CurrentDirectory, "credit_default_traintest.csv");
IDataView trainTestData = mlContext.Data.LoadFromTextFile<CreditEntry>(trainTestFile, hasHeader: true, separatorChar: ',');

trainTestData.Preview()

#!csharp

// Split data into training and test sets keeping 20% of the data for testing and using 80% for training
DataOperationsCatalog.TrainTestData dataSplit = 
    mlContext.Data.TrainTestSplit(trainTestData, testFraction: 0.2, samplingKeyColumnName: "Defaulted");

IDataView trainData = dataSplit.TrainSet;
IDataView testData = dataSplit.TestSet;

dataSplit

#!markdown

## Model Training

#!csharp

#r "nuget:Microsoft.ML.AutoML,0.21.0-preview.23511.1"

#!csharp

using Microsoft.ML;
using Microsoft.ML.AutoML;
using Microsoft.ML.Data;
using static Microsoft.ML.DataOperationsCatalog;

// Infer column information
ColumnInferenceResults columnInference =
    mlContext.Auto().InferColumns(trainTestFile, labelColumnName: "Defaulted", groupColumns: false);

// Create text loader
TextLoader loader = mlContext.Data.CreateTextLoader(columnInference.TextLoaderOptions);

// Load data into IDataView
IDataView data = loader.Load(trainTestFile);

// Split into train (80%), validation (20%) sets
TrainTestData trainValidationData = mlContext.Data.TrainTestSplit(data, testFraction: 0.2);

//Define pipeline
SweepablePipeline pipeline =
    mlContext.Auto().Featurizer(data, columnInformation: columnInference.ColumnInformation)
        .Append(mlContext.Auto().BinaryClassification(labelColumnName: columnInference.ColumnInformation.LabelColumnName));

// Create AutoML experiment
AutoMLExperiment experiment = mlContext.Auto().CreateExperiment();

// Configure experiment
experiment
    .SetPipeline(pipeline)
    .SetBinaryClassificationMetric(BinaryClassificationMetric.F1Score, labelColumn: columnInference.ColumnInformation.LabelColumnName)
    .SetTrainingTimeInSeconds(30)
    .SetDataset(trainValidationData.TrainSet);

#!csharp

// Run the experiment
TrialResult experimentResults = await experiment.RunAsync();

#!csharp

experimentResults.Metric

#!csharp

experimentResults.TrialSettings

#!csharp

var model = experimentResults.Model;
model

#!markdown

## Model Evaluation

#!csharp

BinaryClassificationMetrics metrics = mlContext.BinaryClassification.Evaluate(model.Transform(trainValidationData.TestSet), labelColumnName: columnInference.ColumnInformation.LabelColumnName);
metrics

#!csharp

metrics.ConfusionMatrix.GetFormattedConfusionTable()
