#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# Polyglot Notebooks version of FU-611 Final Project

This notebook uses .NET and Polyglot Notebooks together to perform a binary classification experiment.

#!markdown

## Data Loading

#!csharp

#r "nuget:Microsoft.Data.Analysis,0.21.0-preview.23511.1"

#!csharp

using Microsoft.Data.Analysis;

DataFrame df = DataFrame.LoadCsv("credit_default.csv");

df.Head(5)

#!csharp

df.Info()

#!csharp

df.Description()

#!csharp

df["X1"]

#!csharp

df["X1"].Description()

#!csharp

df["X1"].ValueCounts()

#!markdown

## Data Cleaning

#!csharp

// Rename columns to reflect actual data
df["X1"].SetName("Credit Amount");
df["X2"].SetName("Gender");
df["X3"].SetName("Education");
df["X4"].SetName("Marital Status");
df["X5"].SetName("Age");
df["X6"].SetName("Repay Delay Sep");
df["X7"].SetName("Repay Delay Aug");
df["X8"].SetName("Repay Delay Jul");
df["X9"].SetName("Repay Delay Jun");
df["X10"].SetName("Repay Delay May");
df["X11"].SetName("Repay Delay Apr");
df["X12"].SetName("Bill Sep");
df["X13"].SetName("Bill Aug");
df["X14"].SetName("Bill Jul");
df["X15"].SetName("Bill Jun");
df["X16"].SetName("Bill May");
df["X17"].SetName("Bill Apr");
df["X18"].SetName("Payment Sep");
df["X19"].SetName("Payment Aug");
df["X20"].SetName("Payment Jul");
df["X21"].SetName("Payment Jun");
df["X22"].SetName("Payment May");
df["X23"].SetName("Payment Apr");
df["Y"].SetName("Defaulted");

// Display the new schema
df.Info()

#!csharp

// Change the defaulted column to a boolean storing whether or not it has a 1
df["Defaulted"] = df["Defaulted"].ElementwiseEquals(1);
df["Defaulted"].ValueCounts()

#!csharp

// Save the DataFrame to a file
DataFrame.SaveCsv(df, "credit_default_clean.csv");

#!markdown

Talking about FillNulls and other null management aspects of this would be good.

#!markdown

## Data Exploration

#!fsharp

#r "nuget:Deedle"

//#i "nuget:https://www.myget.org/F/gregs-experimental-packages/api/v3/index.json"
//#r "nuget:Deedle.DotNet.Interactive.Extension,0.1.0-alpha9"

#!fsharp

open Deedle

let df_vis = Frame.ReadCsv("credit_default_clean.csv")

df_vis

#!fsharp

#r "nuget:FSharp.Data"

#!fsharp

dir

#!fsharp

open System
open System.IO
open FSharp.Data

let dir = Environment.CurrentDirectory
let path = Path.Combine(dir, "credit_default_clean.csv")

let df_vis = CsvFile.Load(path)

df_vis

#!fsharp

#r "nuget: Plotly.NET.Interactive"

#!fsharp

open Plotly.NET

Chart.Point(
    x = [0 .. 10],
    y = [0 .. 10]
)
|> Chart.withTitle "Hello World!"

#!fsharp

open Plotly.NET

let matrix =
    [ [ 1.; 1.5; 0.7; 2.7 ]; [ 2.; 0.5; 1.2; 1.4 ]; [ 0.1; 2.6; 2.4; 3.0 ] ]

let rownames = [ "p3"; "p2"; "p1" ]
let colnames = [ "Tp0"; "Tp30"; "Tp60"; "Tp160" ]

// Generating the Heatmap with only z Data
Chart.Heatmap(zData = matrix)

#!csharp

#r "nuget:Plotly.NET.CSharp"
#r "nuget:Plotly.NET.Interactive"

//using Plotly.NET.CSharp;
//using Plotly.NET.Interactive;

#!csharp

using System;
using Plotly.NET;
using Plotly.NET.LayoutObjects;

double[] x = new double[] { 1, 2 };
double[] y = new double[] { 5, 10 };

LinearAxis xAxis = new LinearAxis();
xAxis.SetValue("title", "xAxis");
xAxis.SetValue("showgrid", false);
xAxis.SetValue("showline", true);

LinearAxis yAxis = new LinearAxis();
yAxis.SetValue("title", "yAxis");
yAxis.SetValue("showgrid", false);
yAxis.SetValue("showline", true);

Layout layout = new Layout();
layout.SetValue("xaxis", xAxis);
layout.SetValue("yaxis", yAxis);
layout.SetValue("showlegend", true);

Trace trace = new Trace("scatter");
trace.SetValue("x", x);
trace.SetValue("y", y);
trace.SetValue("mode", "markers");
trace.SetValue("name", "Hello from C#");

GenericChart
    .ofTraceObject(true, trace)
    .WithLayout(layout)
    .Show()

#!fsharp

// #!set --value @csharp:df --name df

#!fsharp

open FSharp.Data

// Load the CSV file into a DataFrame
let new_df = CsvFile.Load("Credit_Default_Clean.csv", inferRows = 1000)

new_df

#!fsharp

open System
open Deedle

// Migrate the C# DataFrame to an F# Frame
let frame = Frame.ofDataFrame(df)

frame

#!csharp

Chart.Plot(
    new Graph.Bar()
    {
        x = df["Defaulted"].ValueCounts().Keys,
        y = df["Defaulted"].ValueCounts().Values,
        name = "Defaulted"
    }
);

#!markdown

## Feature Engineering

#!markdown

## Train / Test Split

#!markdown

## Model Training

#!markdown

## Model Evaluation
